import{_ as a,c as s,o as n,a as p}from"./app.2918728e.js";const b=JSON.parse('{"title":"Docker常用命令","description":"","frontmatter":{"title":"Docker常用命令","author":"yinuuu","date":"2023/01/01","categories":["Docker"],"tags":["Docker"]},"headers":[{"level":3,"title":"1 帮助命令","slug":"_1-帮助命令","link":"#_1-帮助命令","children":[]},{"level":3,"title":"2 镜像命令","slug":"_2-镜像命令","link":"#_2-镜像命令","children":[]},{"level":3,"title":"3 容器命令","slug":"_3-容器命令","link":"#_3-容器命令","children":[]},{"level":3,"title":"4 常用命令总结","slug":"_4-常用命令总结","link":"#_4-常用命令总结","children":[]}],"relativePath":"linux/tools/03-Docker/01-Docker 常用命令.md","lastUpdated":1677165673000}'),e={name:"linux/tools/03-Docker/01-Docker 常用命令.md"},o=p(`<h3 id="_1-帮助命令" tabindex="-1">1 帮助命令 <a class="header-anchor" href="#_1-帮助命令" aria-hidden="true">#</a></h3><h4 id="_1-1-docker-version" tabindex="-1">1.1 docker version <a class="header-anchor" href="#_1-1-docker-version" aria-hidden="true">#</a></h4><p><img src="https://gitee.com/krislin_zhao/IMGcloud/raw/master/img/20200525150924.png#crop=0&amp;crop=0&amp;crop=1&amp;crop=1&amp;id=zZZA6&amp;originHeight=693&amp;originWidth=741&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;status=done&amp;style=none&amp;title=" alt=""></p><h4 id="_1-2-docker-info" tabindex="-1">1.2 docker info <a class="header-anchor" href="#_1-2-docker-info" aria-hidden="true">#</a></h4><p><img src="https://gitee.com/krislin_zhao/IMGcloud/raw/master/img/20200525151007.png#crop=0&amp;crop=0&amp;crop=1&amp;crop=1&amp;id=ryvWC&amp;originHeight=1056&amp;originWidth=1028&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;status=done&amp;style=none&amp;title=" alt=""></p><h4 id="_1-3-docker-help-h" tabindex="-1">1.3 docker --help(-h) <a class="header-anchor" href="#_1-3-docker-help-h" aria-hidden="true">#</a></h4><p><img src="https://gitee.com/krislin_zhao/IMGcloud/raw/master/img/20200525151103.png#crop=0&amp;crop=0&amp;crop=1&amp;crop=1&amp;id=gCvrY&amp;originHeight=1056&amp;originWidth=1761&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;status=done&amp;style=none&amp;title=" alt=""></p><h3 id="_2-镜像命令" tabindex="-1">2 镜像命令 <a class="header-anchor" href="#_2-镜像命令" aria-hidden="true">#</a></h3><h4 id="_2-1-docker-images-列出本地主机上的镜像" tabindex="-1">2.1 docker images 列出本地主机上的镜像 <a class="header-anchor" href="#_2-1-docker-images-列出本地主机上的镜像" aria-hidden="true">#</a></h4><p><img src="https://gitee.com/krislin_zhao/IMGcloud/raw/master/img/20200525152014.png#crop=0&amp;crop=0&amp;crop=1&amp;crop=1&amp;id=SB8l0&amp;originHeight=127&amp;originWidth=1070&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;status=done&amp;style=none&amp;title=" alt=""></p><ul><li>REPOSITORY：表示镜像的仓库源</li><li>TAG：镜像的标签</li><li>IMAGE ID：镜像ID</li><li>CREATED：镜像创建时间</li><li>SIZE：镜像大小 同一仓库源可以有多个 TAG，代表这个仓库源的不同个版本，我们使用 REPOSITORY:TAG 来定义不同的镜像。 如果你不指定一个镜像的版本标签，例如你只使用 ubuntu，docker 将默认使用 ubuntu:latest 镜像</li><li>images 命令 的 option 参数 <ul><li>-a:列出本地所有的镜像（含中间映像层）</li><li>-q :只显示镜像ID <img src="https://gitee.com/krislin_zhao/IMGcloud/raw/master/img/20200525152339.png#crop=0&amp;crop=0&amp;crop=1&amp;crop=1&amp;id=I2H3n&amp;originHeight=77&amp;originWidth=618&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;status=done&amp;style=none&amp;title=" alt=""></li><li>--digests :显示镜像的摘要信息 <img src="https://gitee.com/krislin_zhao/IMGcloud/raw/master/img/20200525152552.png#crop=0&amp;crop=0&amp;crop=1&amp;crop=1&amp;id=oW2ui&amp;originHeight=177&amp;originWidth=1881&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;status=done&amp;style=none&amp;title=" alt=""></li><li>--no-trunc :显示完整的镜像信息 <img src="https://gitee.com/krislin_zhao/IMGcloud/raw/master/img/20200525152638.png#crop=0&amp;crop=0&amp;crop=1&amp;crop=1&amp;id=aZa7G&amp;originHeight=171&amp;originWidth=1884&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;status=done&amp;style=none&amp;title=" alt=""></li></ul></li></ul><h4 id="_2-2-docker-search-镜像名" tabindex="-1">2.2 docker search 镜像名 <a class="header-anchor" href="#_2-2-docker-search-镜像名" aria-hidden="true">#</a></h4><p>从 Docker hub 官网搜索镜像以 tomcat 为例 <img src="https://gitee.com/krislin_zhao/IMGcloud/raw/master/img/20200525152813.png#crop=0&amp;crop=0&amp;crop=1&amp;crop=1&amp;id=SjHf3&amp;originHeight=675&amp;originWidth=1536&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;status=done&amp;style=none&amp;title=" alt=""> 和在官网搜索的结果一模一样 <img src="https://gitee.com/krislin_zhao/IMGcloud/raw/master/img/20200525152954.png#crop=0&amp;crop=0&amp;crop=1&amp;crop=1&amp;id=RePhi&amp;originHeight=963&amp;originWidth=1883&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;status=done&amp;style=none&amp;title=" alt=""></p><ul><li>参数说明 <ul><li>-s : 列出收藏数不小于指定值的镜像 <img src="https://gitee.com/krislin_zhao/IMGcloud/raw/master/img/20200525153109.png#crop=0&amp;crop=0&amp;crop=1&amp;crop=1&amp;id=JkRTq&amp;originHeight=174&amp;originWidth=1432&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;status=done&amp;style=none&amp;title=" alt=""> 只搜索点赞数大于30的镜像</li><li>--no-trunc : 显示完整的镜像描述</li><li>--automated : 只列出 automated build类型的镜像</li></ul></li></ul><h4 id="_2-3-docker-pull-镜像名-tag" tabindex="-1">2.3 docker pull 镜像名:tag <a class="header-anchor" href="#_2-3-docker-pull-镜像名-tag" aria-hidden="true">#</a></h4><p>拉取镜像(从前面我们已经设置的阿里云的镜像加速地址) 如果 <code>docker pull 镜像名</code> 后面不加参数,默认下载最新版本 即 docker pull tomcat 等价于 docker pull tomcat:latest</p><div class="language-shell"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki material-theme-palenight vp-code-dark" tabindex="0"><code><span class="line"><span style="color:#FFCB6B;">docker</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">pull</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">tomcat</span></span>
<span class="line"></span></code></pre><pre class="shiki one-dark-pro vp-code-light" tabindex="0"><code><span class="line"><span style="color:#ABB2BF;">docker </span><span style="color:#98C379;">pull</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">tomcat</span></span>
<span class="line"></span></code></pre></div><p><img src="https://gitee.com/krislin_zhao/IMGcloud/raw/master/img/20200525153705.png#crop=0&amp;crop=0&amp;crop=1&amp;crop=1&amp;id=klhL3&amp;originHeight=395&amp;originWidth=961&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;status=done&amp;style=none&amp;title=" alt=""><img src="https://gitee.com/krislin_zhao/IMGcloud/raw/master/img/20200525153806.png#crop=0&amp;crop=0&amp;crop=1&amp;crop=1&amp;id=zS6Gr&amp;originHeight=128&amp;originWidth=1063&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;status=done&amp;style=none&amp;title=" alt=""></p><h4 id="_2-4-docker-rmi-镜像名-镜像id" tabindex="-1">2.4 docker rmi 镜像名/镜像id <a class="header-anchor" href="#_2-4-docker-rmi-镜像名-镜像id" aria-hidden="true">#</a></h4><p>删除 Docker 镜像 ps: <code>docker rmi 镜像名</code> 默认会删除标签为 :latest 的镜像,如果要删除指定标签的镜像,在镜像名后面指定 tag 即可 <img src="https://gitee.com/krislin_zhao/IMGcloud/raw/master/img/20200525153922.png#crop=0&amp;crop=0&amp;crop=1&amp;crop=1&amp;id=H3MMz&amp;originHeight=69&amp;originWidth=1873&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;status=done&amp;style=none&amp;title=" alt=""> 如果无法删除,出现如上提示,表示我们的镜像正在使用中,可以使用 -f 强制删除 <img src="https://gitee.com/krislin_zhao/IMGcloud/raw/master/img/20200525153954.png#crop=0&amp;crop=0&amp;crop=1&amp;crop=1&amp;id=F637M&amp;originHeight=98&amp;originWidth=1194&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;status=done&amp;style=none&amp;title=" alt=""> 如果想要删除多个镜像 docker rmi -f 镜像名1:tag 镜像名2:tag</p><div class="language-shell"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki material-theme-palenight vp-code-dark" tabindex="0"><code><span class="line"><span style="color:#FFCB6B;">sudo</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">docker</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">rmi</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">-f</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">hello-world</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">tomcat</span></span>
<span class="line"></span></code></pre><pre class="shiki one-dark-pro vp-code-light" tabindex="0"><code><span class="line"><span style="color:#ABB2BF;">sudo </span><span style="color:#98C379;">docker</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">rmi</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">-f</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">hello-world</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">tomcat</span></span>
<span class="line"></span></code></pre></div><p>删除全部镜像</p><div class="language-yaml"><button title="Copy Code" class="copy"></button><span class="lang">yaml</span><pre class="shiki material-theme-palenight vp-code-dark" tabindex="0"><code><span class="line"><span style="color:#C3E88D;">sudo docker rmi -f $(docker images -qa)</span></span>
<span class="line"></span></code></pre><pre class="shiki one-dark-pro vp-code-light" tabindex="0"><code><span class="line"><span style="color:#98C379;">sudo docker rmi -f $(docker images -qa)</span></span>
<span class="line"></span></code></pre></div><h4 id="_2-5-镜像重命名" tabindex="-1">2.5 镜像重命名 <a class="header-anchor" href="#_2-5-镜像重命名" aria-hidden="true">#</a></h4><div class="language-shell"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki material-theme-palenight vp-code-dark" tabindex="0"><code><span class="line"><span style="color:#FFCB6B;">docker</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">image</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">tag</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">test:latest</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">my_docker/test:latest</span></span>
<span class="line"><span style="color:#FFCB6B;">docker</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">image</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">tag</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">fb583c3ac45d</span><span style="color:#A6ACCD;">  </span><span style="color:#C3E88D;">my_docker/test:latest</span></span>
<span class="line"></span></code></pre><pre class="shiki one-dark-pro vp-code-light" tabindex="0"><code><span class="line"><span style="color:#ABB2BF;">docker </span><span style="color:#98C379;">image</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">tag</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">test:latest</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">my_docker/test:latest</span></span>
<span class="line"><span style="color:#ABB2BF;">docker </span><span style="color:#98C379;">image</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">tag</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">fb583c3ac45d</span><span style="color:#ABB2BF;">  </span><span style="color:#98C379;">my_docker/test:latest</span></span>
<span class="line"></span></code></pre></div><h3 id="_3-容器命令" tabindex="-1">3 容器命令 <a class="header-anchor" href="#_3-容器命令" aria-hidden="true">#</a></h3><h4 id="_3-1-docker-pull-下载容器" tabindex="-1">3.1 docker pull 下载容器 <a class="header-anchor" href="#_3-1-docker-pull-下载容器" aria-hidden="true">#</a></h4><p>以 CentOS 为例,从阿里云下载一个 CentOS 的镜像 <img src="https://gitee.com/krislin_zhao/IMGcloud/raw/master/img/20200526090859.png#crop=0&amp;crop=0&amp;crop=1&amp;crop=1&amp;id=LeMfq&amp;originHeight=272&amp;originWidth=1047&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;status=done&amp;style=none&amp;title=" alt=""></p><h4 id="_3-2-docker-run-新建并启动容器" tabindex="-1">3.2 docker run 新建并启动容器 <a class="header-anchor" href="#_3-2-docker-run-新建并启动容器" aria-hidden="true">#</a></h4><div class="language-shell"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki material-theme-palenight vp-code-dark" tabindex="0"><code><span class="line"><span style="color:#FFCB6B;">docker</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">run</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">[</span><span style="color:#A6ACCD;">options</span><span style="color:#89DDFF;">]</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">image</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">[</span><span style="color:#A6ACCD;">command</span><span style="color:#89DDFF;">]</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">[</span><span style="color:#A6ACCD;">arg...</span><span style="color:#89DDFF;">]</span></span>
<span class="line"></span></code></pre><pre class="shiki one-dark-pro vp-code-light" tabindex="0"><code><span class="line"><span style="color:#ABB2BF;">docker </span><span style="color:#98C379;">run</span><span style="color:#ABB2BF;"> [options] </span><span style="color:#98C379;">image</span><span style="color:#ABB2BF;"> [command] [arg...]</span></span>
<span class="line"></span></code></pre></div><p>options 这里常用的有: --name=&quot;容器新名字&quot;: 为容器指定一个名称； -d: 后台运行容器，并返回容器ID，也即启动守护式容器； -i：以交互模式运行容器，通常与 -t 同时使用； -t：为容器重新分配一个伪输入终端，通常与 -i 同时使用； -P: 随机端口映射； -p: 指定端口映射，有以下四种格式 <code>1.ip:hostPort:containerPort 2.ip::containerPort 3.hostPort:containerPort 4.containerPort</code> 我们使用 -it 参数来启动 CentOS 容器 <img src="https://gitee.com/krislin_zhao/IMGcloud/raw/master/img/20200526092354.png#crop=0&amp;crop=0&amp;crop=1&amp;crop=1&amp;id=FaXXP&amp;originHeight=141&amp;originWidth=1368&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;status=done&amp;style=none&amp;title=" alt=""> root@ 后面跟着的就是该容器的 id</p><h4 id="_3-3-docker-ps-查看所有运行的容器命令" tabindex="-1">3.3 docker ps 查看所有运行的容器命令 <a class="header-anchor" href="#_3-3-docker-ps-查看所有运行的容器命令" aria-hidden="true">#</a></h4><p>docker ps [options] <img src="https://gitee.com/krislin_zhao/IMGcloud/raw/master/img/20200526092457.png#crop=0&amp;crop=0&amp;crop=1&amp;crop=1&amp;id=qfzkV&amp;originHeight=80&amp;originWidth=1586&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;status=done&amp;style=none&amp;title=" alt=""> 参数说明: -a :列出当前所有正在运行的容器+历史上运行过的容器 -l :显示最近运行的容器。 -n number：显示最近 number 个创建的容器。 -q :静默模式，只显示容器编号。 --no-trunc :不截断输出。</p><h4 id="_3-4-exit-退出容器" tabindex="-1">3.4 exit 退出容器 <a class="header-anchor" href="#_3-4-exit-退出容器" aria-hidden="true">#</a></h4><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight vp-code-dark" tabindex="0"><code><span class="line"><span style="color:#A6ACCD;">exit: 容器停止并退出</span></span>
<span class="line"><span style="color:#A6ACCD;">ctrl+p+q: 容器不停止退出</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre><pre class="shiki one-dark-pro vp-code-light" tabindex="0"><code><span class="line"><span style="color:#abb2bf;">exit: 容器停止并退出</span></span>
<span class="line"><span style="color:#abb2bf;">ctrl+p+q: 容器不停止退出</span></span>
<span class="line"><span style="color:#abb2bf;"></span></span></code></pre></div><h4 id="_3-5-docker-start-启动已经创建的容器" tabindex="-1">3.5 docker start 启动已经创建的容器 <a class="header-anchor" href="#_3-5-docker-start-启动已经创建的容器" aria-hidden="true">#</a></h4><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight vp-code-dark" tabindex="0"><code><span class="line"><span style="color:#A6ACCD;">docker start 容器id/容器名</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre><pre class="shiki one-dark-pro vp-code-light" tabindex="0"><code><span class="line"><span style="color:#abb2bf;">docker start 容器id/容器名</span></span>
<span class="line"><span style="color:#abb2bf;"></span></span></code></pre></div><h4 id="_3-6-docker-restart-重启容器" tabindex="-1">3.6 docker restart 重启容器 <a class="header-anchor" href="#_3-6-docker-restart-重启容器" aria-hidden="true">#</a></h4><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight vp-code-dark" tabindex="0"><code><span class="line"><span style="color:#A6ACCD;">docker restart 容器id/容器名</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre><pre class="shiki one-dark-pro vp-code-light" tabindex="0"><code><span class="line"><span style="color:#abb2bf;">docker restart 容器id/容器名</span></span>
<span class="line"><span style="color:#abb2bf;"></span></span></code></pre></div><h4 id="_3-7-docker-stop-停止容器" tabindex="-1">3.7 docker stop 停止容器 <a class="header-anchor" href="#_3-7-docker-stop-停止容器" aria-hidden="true">#</a></h4><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight vp-code-dark" tabindex="0"><code><span class="line"><span style="color:#A6ACCD;">docker stop 容器id/容器名</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre><pre class="shiki one-dark-pro vp-code-light" tabindex="0"><code><span class="line"><span style="color:#abb2bf;">docker stop 容器id/容器名</span></span>
<span class="line"><span style="color:#abb2bf;"></span></span></code></pre></div><h4 id="_3-8-docker-kill-强制关闭容器" tabindex="-1">3.8 docker kill 强制关闭容器 <a class="header-anchor" href="#_3-8-docker-kill-强制关闭容器" aria-hidden="true">#</a></h4><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight vp-code-dark" tabindex="0"><code><span class="line"><span style="color:#A6ACCD;">docker kill 容器id/容器名</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre><pre class="shiki one-dark-pro vp-code-light" tabindex="0"><code><span class="line"><span style="color:#abb2bf;">docker kill 容器id/容器名</span></span>
<span class="line"><span style="color:#abb2bf;"></span></span></code></pre></div><h4 id="_3-9-docker-rm-删除已停止的容器" tabindex="-1">3.9 docker rm 删除已停止的容器 <a class="header-anchor" href="#_3-9-docker-rm-删除已停止的容器" aria-hidden="true">#</a></h4><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight vp-code-dark" tabindex="0"><code><span class="line"><span style="color:#A6ACCD;">docker rm 容器id/容器名</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span>
<span class="line"><span style="color:#A6ACCD;">一次性删除多个已经停止的容器</span></span>
<span class="line"><span style="color:#A6ACCD;">docker rm -f $(docker ps -qa) 或者 docker ps -a -q | xargs docker rm</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre><pre class="shiki one-dark-pro vp-code-light" tabindex="0"><code><span class="line"><span style="color:#abb2bf;">docker rm 容器id/容器名</span></span>
<span class="line"><span style="color:#abb2bf;"></span></span>
<span class="line"><span style="color:#abb2bf;">一次性删除多个已经停止的容器</span></span>
<span class="line"><span style="color:#abb2bf;">docker rm -f $(docker ps -qa) 或者 docker ps -a -q | xargs docker rm</span></span>
<span class="line"><span style="color:#abb2bf;"></span></span></code></pre></div><h4 id="_3-10-交互式容器和守护式容器" tabindex="-1">3.10 交互式容器和守护式容器 <a class="header-anchor" href="#_3-10-交互式容器和守护式容器" aria-hidden="true">#</a></h4><p>前面启动 CentOS 容器使用的 -it 参数就是表示交互式命令,通过终端来保持和容器的交互 如果要启动守护式容器,那么需要加上 -d 参数 <img src="https://gitee.com/krislin_zhao/IMGcloud/raw/master/img/20200526093221.png#crop=0&amp;crop=0&amp;crop=1&amp;crop=1&amp;id=NcXIB&amp;originHeight=126&amp;originWidth=1535&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;status=done&amp;style=none&amp;title=" alt=""> 但是此时查询正在运行的容器，没有发现以后台模式运行的 Docker 容器 <img src="https://gitee.com/krislin_zhao/IMGcloud/raw/master/img/20200526093331.png#crop=0&amp;crop=0&amp;crop=1&amp;crop=1&amp;id=BoRYZ&amp;originHeight=101&amp;originWidth=1723&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;status=done&amp;style=none&amp;title=" alt=""> 发现该容器已经自动退出了</p><blockquote><p>问题：docker ps -a 进行查看, 会发现容器已经退出 很重要的一点: Docker容器后台运行,就必须有一个前台进程. 容器运行的命令如果不是那些一直挂起的命令（比如运行top，tail），是会自动退出的。</p><p>这个是docker的机制问题,比如你的web容器,我们以nginx为例，正常情况下,我们配置启动服务只需要启动响应的service即可。例如 service nginx start 但是,这样做,nginx为后台进程模式运行,就导致docker前台没有运行的应用, 这样的容器后台启动后,会立即自杀因为他觉得他没事可做了. 所以，最佳的解决方案是,将你要运行的程序以前台进程的形式运行</p></blockquote><h4 id="_3-11-docker-logs-容器日志" tabindex="-1">3.11 docker logs 容器日志 <a class="header-anchor" href="#_3-11-docker-logs-容器日志" aria-hidden="true">#</a></h4><div class="language-shell"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki material-theme-palenight vp-code-dark" tabindex="0"><code><span class="line"><span style="color:#FFCB6B;">//</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">对于后台运行的容器,可以以下面的方式来启动</span><span style="color:#A6ACCD;"> </span></span>
<span class="line"><span style="color:#FFCB6B;">docker</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">run</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">-d</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">--name</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">centos02</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">centos</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">/bin/sh</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">-c</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">while true;do echo hello world;sleep 2;done</span><span style="color:#89DDFF;">&quot;</span></span>
<span class="line"></span></code></pre><pre class="shiki one-dark-pro vp-code-light" tabindex="0"><code><span class="line"><span style="color:#ABB2BF;">// </span><span style="color:#98C379;">对于后台运行的容器,可以以下面的方式来启动</span><span style="color:#ABB2BF;"> </span></span>
<span class="line"><span style="color:#ABB2BF;">docker </span><span style="color:#98C379;">run</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">-d</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">--name</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">centos02</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">centos</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">/bin/sh</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">-c</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&quot;while true;do echo hello world;sleep 2;done&quot;</span></span>
<span class="line"></span></code></pre></div><p><img src="https://gitee.com/krislin_zhao/IMGcloud/raw/master/img/20200526093745.png#crop=0&amp;crop=0&amp;crop=1&amp;crop=1&amp;id=XnZZf&amp;originHeight=209&amp;originWidth=1605&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;status=done&amp;style=none&amp;title=" alt=""> 即便是后台启动,但是因为前台一直打印日志,Docker 容器也不会自动关闭 如果此时我们想去查看 Docker 容器的日志,可以通过以下命令</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight vp-code-dark" tabindex="0"><code><span class="line"><span style="color:#A6ACCD;">docker logs -f -t --tail 容器ID/容器名</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre><pre class="shiki one-dark-pro vp-code-light" tabindex="0"><code><span class="line"><span style="color:#abb2bf;">docker logs -f -t --tail 容器ID/容器名</span></span>
<span class="line"><span style="color:#abb2bf;"></span></span></code></pre></div><ul><li>-t 是加入时间戳</li><li>-f 跟随最新的日志打印</li><li>--tail 数字 显示最后多少条 <img src="https://gitee.com/krislin_zhao/IMGcloud/raw/master/img/20200526094051.png#crop=0&amp;crop=0&amp;crop=1&amp;crop=1&amp;id=PxGAA&amp;originHeight=430&amp;originWidth=857&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;status=done&amp;style=none&amp;title=" alt=""></li></ul><h4 id="_3-12-docker-top-查看容器内运行的进程" tabindex="-1">3.12 docker top 查看容器内运行的进程 <a class="header-anchor" href="#_3-12-docker-top-查看容器内运行的进程" aria-hidden="true">#</a></h4><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight vp-code-dark" tabindex="0"><code><span class="line"><span style="color:#A6ACCD;">docker top 容器ID/容器名</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre><pre class="shiki one-dark-pro vp-code-light" tabindex="0"><code><span class="line"><span style="color:#abb2bf;">docker top 容器ID/容器名</span></span>
<span class="line"><span style="color:#abb2bf;"></span></span></code></pre></div><p><img src="https://gitee.com/krislin_zhao/IMGcloud/raw/master/img/20200526094217.png#crop=0&amp;crop=0&amp;crop=1&amp;crop=1&amp;id=HJ4B6&amp;originHeight=152&amp;originWidth=1881&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;status=done&amp;style=none&amp;title=" alt=""></p><h4 id="_3-13-docker-inspect-查看容器内部细节" tabindex="-1">3.13 docker inspect 查看容器内部细节 <a class="header-anchor" href="#_3-13-docker-inspect-查看容器内部细节" aria-hidden="true">#</a></h4><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight vp-code-dark" tabindex="0"><code><span class="line"><span style="color:#A6ACCD;">docker：如何查看容器的挂载目录</span></span>
<span class="line"><span style="color:#A6ACCD;">docker inspect container_name | grep Mounts -A 20</span></span>
<span class="line"><span style="color:#A6ACCD;">docker inspect container_id | grep Mounts -A 20</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre><pre class="shiki one-dark-pro vp-code-light" tabindex="0"><code><span class="line"><span style="color:#abb2bf;">docker：如何查看容器的挂载目录</span></span>
<span class="line"><span style="color:#abb2bf;">docker inspect container_name | grep Mounts -A 20</span></span>
<span class="line"><span style="color:#abb2bf;">docker inspect container_id | grep Mounts -A 20</span></span>
<span class="line"><span style="color:#abb2bf;"></span></span></code></pre></div><p><img src="https://gitee.com/krislin_zhao/IMGcloud/raw/master/img/20200526094333.png#crop=0&amp;crop=0&amp;crop=1&amp;crop=1&amp;id=uvdeI&amp;originHeight=1071&amp;originWidth=1191&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;status=done&amp;style=none&amp;title=" alt=""></p><h4 id="_3-14-进入正在运行的容器并以命令行交互" tabindex="-1">3.14 进入正在运行的容器并以命令行交互 <a class="header-anchor" href="#_3-14-进入正在运行的容器并以命令行交互" aria-hidden="true">#</a></h4><p>重新进入正在运行的容器</p><div class="language-shell"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki material-theme-palenight vp-code-dark" tabindex="0"><code><span class="line"><span style="color:#FFCB6B;">docker</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">attach</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">容器ID/容器名</span></span>
<span class="line"></span></code></pre><pre class="shiki one-dark-pro vp-code-light" tabindex="0"><code><span class="line"><span style="color:#ABB2BF;">docker </span><span style="color:#98C379;">attach</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">容器ID/容器名</span></span>
<span class="line"></span></code></pre></div><p><img src="https://gitee.com/krislin_zhao/IMGcloud/raw/master/img/20200526094831.png#crop=0&amp;crop=0&amp;crop=1&amp;crop=1&amp;id=nvby2&amp;originHeight=120&amp;originWidth=1322&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;status=done&amp;style=none&amp;title=" alt=""> 还有一种方式是</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight vp-code-dark" tabindex="0"><code><span class="line"><span style="color:#A6ACCD;">docker exec -it 容器ID/容器名 bash(功能更加强大,可以直接返回结果到客户端)</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre><pre class="shiki one-dark-pro vp-code-light" tabindex="0"><code><span class="line"><span style="color:#abb2bf;">docker exec -it 容器ID/容器名 bash(功能更加强大,可以直接返回结果到客户端)</span></span>
<span class="line"><span style="color:#abb2bf;"></span></span></code></pre></div><ul><li><strong>-i</strong>: 交互式操作。</li><li><strong>-t</strong>: 终端。</li><li><strong>/bin/bash</strong>：放在镜像名后的是命令，这里我们希望有个交互式 Shell，因此用的是 /bin/bash。</li></ul><p>区别在于:</p><ul><li>attach 命令直接进入容器启动命令的终端，不会启动新的进程</li><li>exec 命令是在容器中打开新的终端，并且可以启动新的进程</li></ul><h4 id="_3-15-docker-cp-从容器内拷贝文件到主机上" tabindex="-1">3.15 docker cp 从容器内拷贝文件到主机上 <a class="header-anchor" href="#_3-15-docker-cp-从容器内拷贝文件到主机上" aria-hidden="true">#</a></h4><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight vp-code-dark" tabindex="0"><code><span class="line"><span style="color:#A6ACCD;">docker cp 容器ID(或容器名):容器内路径 目的主机路径</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre><pre class="shiki one-dark-pro vp-code-light" tabindex="0"><code><span class="line"><span style="color:#abb2bf;">docker cp 容器ID(或容器名):容器内路径 目的主机路径</span></span>
<span class="line"><span style="color:#abb2bf;"></span></span></code></pre></div><p>示例如下 <img src="https://gitee.com/krislin_zhao/IMGcloud/raw/master/img/20200526095315.png#crop=0&amp;crop=0&amp;crop=1&amp;crop=1&amp;id=wLPn4&amp;originHeight=203&amp;originWidth=698&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;status=done&amp;style=none&amp;title=" alt=""></p><h3 id="_4-常用命令总结" tabindex="-1">4 常用命令总结 <a class="header-anchor" href="#_4-常用命令总结" aria-hidden="true">#</a></h3><p><img src="https://gitee.com/krislin_zhao/IMGcloud/raw/master/img/20200526095411.png#crop=0&amp;crop=0&amp;crop=1&amp;crop=1&amp;id=IdqqK&amp;originHeight=638&amp;originWidth=900&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;status=done&amp;style=none&amp;title=" alt=""></p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight has-diff vp-code-dark" tabindex="0"><code><span class="line"><span style="color:#A6ACCD;">attach    Attach to a running container                 # 当前 shell 下 attach 连接指定运行镜像</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span>
<span class="line"><span style="color:#A6ACCD;">build     Build an image from a Dockerfile              # 通过 Dockerfile 定制镜像</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span>
<span class="line"><span style="color:#A6ACCD;">commit    Create a new image from a container changes   # 提交当前容器为新的镜像</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span>
<span class="line"><span style="color:#A6ACCD;">cp        Copy files/folders from the containers filesystem to the host path   #从容器中拷贝指定文件或者目录到宿主机中</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span>
<span class="line"><span style="color:#A6ACCD;">create    Create a new container                        # 创建一个新的容器，同 run，但不启动容器</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span>
<span class="line"><span style="color:#A6ACCD;">diff      Inspect changes on a container&#39;s filesystem   # 查看 docker 容器变化</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span>
<span class="line"><span style="color:#A6ACCD;">events    Get real time events from the server          # 从 docker 服务获取容器实时事件</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span>
<span class="line"><span style="color:#A6ACCD;">exec      Run a command in an existing container        # 在已存在的容器上运行命令</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span>
<span class="line"><span style="color:#A6ACCD;">export    Stream the contents of a container as a tar archive   # 导出容器的内容流作为一个 tar 归档文件[对应 import ]</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span>
<span class="line"><span style="color:#A6ACCD;">history   Show the history of an image                  # 展示一个镜像形成历史</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span>
<span class="line"><span style="color:#A6ACCD;">images    List images                                   # 列出系统当前镜像</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span>
<span class="line"><span style="color:#A6ACCD;">import    Create a new filesystem image from the contents of a tarball # 从tar包中的内容创建一个新的文件系统映像[对应export]</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span>
<span class="line"><span style="color:#A6ACCD;">info      Display system-wide information               # 显示系统相关信息</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span>
<span class="line"><span style="color:#A6ACCD;">inspect   Return low-level information on a container   # 查看容器详细信息</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span>
<span class="line"><span style="color:#A6ACCD;">kill      Kill a running container                      # kill 指定 docker 容器</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span>
<span class="line"><span style="color:#A6ACCD;">load      Load an image from a tar archive              # 从一个 tar 包中加载一个镜像[对应 save]</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span>
<span class="line"><span style="color:#A6ACCD;">login     Register or Login to the docker registry server    # 注册或者登陆一个 docker 源服务器</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span>
<span class="line"><span style="color:#A6ACCD;">logout    Log out from a Docker registry server          # 从当前 Docker registry 退出</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span>
<span class="line"><span style="color:#A6ACCD;">logs      Fetch the logs of a container                 # 输出当前容器日志信息</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span>
<span class="line"><span style="color:#A6ACCD;">port      Lookup the public-facing port which is NAT-ed to PRIVATE_PORT    # 查看映射端口对应的容器内部源端口</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span>
<span class="line"><span style="color:#A6ACCD;">pause     Pause all processes within a container        # 暂停容器</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span>
<span class="line"><span style="color:#A6ACCD;">ps        List containers                               # 列出容器列表</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span>
<span class="line"><span style="color:#A6ACCD;">pull      Pull an image or a repository from the docker registry server   # 从docker镜像源服务器拉取指定镜像或者库镜像</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span>
<span class="line"><span style="color:#A6ACCD;">push      Push an image or a repository to the docker registry server    # 推送指定镜像或者库镜像至docker源服务器</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span>
<span class="line"><span style="color:#A6ACCD;">restart   Restart a running container                   # 重启运行的容器</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span>
<span class="line"><span style="color:#A6ACCD;">rm        Remove one or more containers                 # 移除一个或者多个容器</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span>
<span class="line"><span style="color:#A6ACCD;">rmi       Remove one or more images             # 移除一个或多个镜像[无容器使用该镜像才可删除，否则需删除相关容器才可继续或 -f 强制删除]</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span>
<span class="line"><span style="color:#A6ACCD;">run       Run a command in a new container              # 创建一个新的容器并运行一个命令</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span>
<span class="line"><span style="color:#A6ACCD;">save      Save an image to a tar archive                # 保存一个镜像为一个 tar 包[对应 </span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span>
<span class="line"><span style="color:#A6ACCD;">load]</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span>
<span class="line"><span style="color:#A6ACCD;">search    Search for an image on the Docker Hub         # 在 docker hub 中搜索镜像</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span>
<span class="line"><span style="color:#A6ACCD;">start     Start a stopped containers                    # 启动容器</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span>
<span class="line"><span style="color:#A6ACCD;">stop      Stop a running containers                     # 停止容器</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span>
<span class="line"><span style="color:#A6ACCD;">tag       Tag an image into a repository                # 给源中镜像打标签</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span>
<span class="line"><span style="color:#A6ACCD;">top       Lookup the running processes of a container   # 查看容器中运行的进程信息</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span>
<span class="line"><span style="color:#A6ACCD;">unpause   Unpause a paused container                    # 取消暂停容器</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span>
<span class="line"><span style="color:#A6ACCD;">version   Show the docker version information           # 查看 docker 版本号</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span>
<span class="line"><span style="color:#A6ACCD;">wait      Block until a container stops, then print its exit code   # 截取容器停止时的退出状态值</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre><pre class="shiki one-dark-pro has-diff vp-code-light" tabindex="0"><code><span class="line"><span style="color:#abb2bf;">attach    Attach to a running container                 # 当前 shell 下 attach 连接指定运行镜像</span></span>
<span class="line"><span style="color:#abb2bf;"></span></span>
<span class="line"><span style="color:#abb2bf;">build     Build an image from a Dockerfile              # 通过 Dockerfile 定制镜像</span></span>
<span class="line"><span style="color:#abb2bf;"></span></span>
<span class="line"><span style="color:#abb2bf;">commit    Create a new image from a container changes   # 提交当前容器为新的镜像</span></span>
<span class="line"><span style="color:#abb2bf;"></span></span>
<span class="line"><span style="color:#abb2bf;">cp        Copy files/folders from the containers filesystem to the host path   #从容器中拷贝指定文件或者目录到宿主机中</span></span>
<span class="line"><span style="color:#abb2bf;"></span></span>
<span class="line"><span style="color:#abb2bf;">create    Create a new container                        # 创建一个新的容器，同 run，但不启动容器</span></span>
<span class="line"><span style="color:#abb2bf;"></span></span>
<span class="line"><span style="color:#abb2bf;">diff      Inspect changes on a container&#39;s filesystem   # 查看 docker 容器变化</span></span>
<span class="line"><span style="color:#abb2bf;"></span></span>
<span class="line"><span style="color:#abb2bf;">events    Get real time events from the server          # 从 docker 服务获取容器实时事件</span></span>
<span class="line"><span style="color:#abb2bf;"></span></span>
<span class="line"><span style="color:#abb2bf;">exec      Run a command in an existing container        # 在已存在的容器上运行命令</span></span>
<span class="line"><span style="color:#abb2bf;"></span></span>
<span class="line"><span style="color:#abb2bf;">export    Stream the contents of a container as a tar archive   # 导出容器的内容流作为一个 tar 归档文件[对应 import ]</span></span>
<span class="line"><span style="color:#abb2bf;"></span></span>
<span class="line"><span style="color:#abb2bf;">history   Show the history of an image                  # 展示一个镜像形成历史</span></span>
<span class="line"><span style="color:#abb2bf;"></span></span>
<span class="line"><span style="color:#abb2bf;">images    List images                                   # 列出系统当前镜像</span></span>
<span class="line"><span style="color:#abb2bf;"></span></span>
<span class="line"><span style="color:#abb2bf;">import    Create a new filesystem image from the contents of a tarball # 从tar包中的内容创建一个新的文件系统映像[对应export]</span></span>
<span class="line"><span style="color:#abb2bf;"></span></span>
<span class="line"><span style="color:#abb2bf;">info      Display system-wide information               # 显示系统相关信息</span></span>
<span class="line"><span style="color:#abb2bf;"></span></span>
<span class="line"><span style="color:#abb2bf;">inspect   Return low-level information on a container   # 查看容器详细信息</span></span>
<span class="line"><span style="color:#abb2bf;"></span></span>
<span class="line"><span style="color:#abb2bf;">kill      Kill a running container                      # kill 指定 docker 容器</span></span>
<span class="line"><span style="color:#abb2bf;"></span></span>
<span class="line"><span style="color:#abb2bf;">load      Load an image from a tar archive              # 从一个 tar 包中加载一个镜像[对应 save]</span></span>
<span class="line"><span style="color:#abb2bf;"></span></span>
<span class="line"><span style="color:#abb2bf;">login     Register or Login to the docker registry server    # 注册或者登陆一个 docker 源服务器</span></span>
<span class="line"><span style="color:#abb2bf;"></span></span>
<span class="line"><span style="color:#abb2bf;">logout    Log out from a Docker registry server          # 从当前 Docker registry 退出</span></span>
<span class="line"><span style="color:#abb2bf;"></span></span>
<span class="line"><span style="color:#abb2bf;">logs      Fetch the logs of a container                 # 输出当前容器日志信息</span></span>
<span class="line"><span style="color:#abb2bf;"></span></span>
<span class="line"><span style="color:#abb2bf;">port      Lookup the public-facing port which is NAT-ed to PRIVATE_PORT    # 查看映射端口对应的容器内部源端口</span></span>
<span class="line"><span style="color:#abb2bf;"></span></span>
<span class="line"><span style="color:#abb2bf;">pause     Pause all processes within a container        # 暂停容器</span></span>
<span class="line"><span style="color:#abb2bf;"></span></span>
<span class="line"><span style="color:#abb2bf;">ps        List containers                               # 列出容器列表</span></span>
<span class="line"><span style="color:#abb2bf;"></span></span>
<span class="line"><span style="color:#abb2bf;">pull      Pull an image or a repository from the docker registry server   # 从docker镜像源服务器拉取指定镜像或者库镜像</span></span>
<span class="line"><span style="color:#abb2bf;"></span></span>
<span class="line"><span style="color:#abb2bf;">push      Push an image or a repository to the docker registry server    # 推送指定镜像或者库镜像至docker源服务器</span></span>
<span class="line"><span style="color:#abb2bf;"></span></span>
<span class="line"><span style="color:#abb2bf;">restart   Restart a running container                   # 重启运行的容器</span></span>
<span class="line"><span style="color:#abb2bf;"></span></span>
<span class="line"><span style="color:#abb2bf;">rm        Remove one or more containers                 # 移除一个或者多个容器</span></span>
<span class="line"><span style="color:#abb2bf;"></span></span>
<span class="line"><span style="color:#abb2bf;">rmi       Remove one or more images             # 移除一个或多个镜像[无容器使用该镜像才可删除，否则需删除相关容器才可继续或 -f 强制删除]</span></span>
<span class="line"><span style="color:#abb2bf;"></span></span>
<span class="line"><span style="color:#abb2bf;">run       Run a command in a new container              # 创建一个新的容器并运行一个命令</span></span>
<span class="line"><span style="color:#abb2bf;"></span></span>
<span class="line"><span style="color:#abb2bf;">save      Save an image to a tar archive                # 保存一个镜像为一个 tar 包[对应 </span></span>
<span class="line"><span style="color:#abb2bf;"></span></span>
<span class="line"><span style="color:#abb2bf;">load]</span></span>
<span class="line"><span style="color:#abb2bf;"></span></span>
<span class="line"><span style="color:#abb2bf;">search    Search for an image on the Docker Hub         # 在 docker hub 中搜索镜像</span></span>
<span class="line"><span style="color:#abb2bf;"></span></span>
<span class="line"><span style="color:#abb2bf;">start     Start a stopped containers                    # 启动容器</span></span>
<span class="line"><span style="color:#abb2bf;"></span></span>
<span class="line"><span style="color:#abb2bf;">stop      Stop a running containers                     # 停止容器</span></span>
<span class="line"><span style="color:#abb2bf;"></span></span>
<span class="line"><span style="color:#abb2bf;">tag       Tag an image into a repository                # 给源中镜像打标签</span></span>
<span class="line"><span style="color:#abb2bf;"></span></span>
<span class="line"><span style="color:#abb2bf;">top       Lookup the running processes of a container   # 查看容器中运行的进程信息</span></span>
<span class="line"><span style="color:#abb2bf;"></span></span>
<span class="line"><span style="color:#abb2bf;">unpause   Unpause a paused container                    # 取消暂停容器</span></span>
<span class="line"><span style="color:#abb2bf;"></span></span>
<span class="line"><span style="color:#abb2bf;">version   Show the docker version information           # 查看 docker 版本号</span></span>
<span class="line"><span style="color:#abb2bf;"></span></span>
<span class="line"><span style="color:#abb2bf;">wait      Block until a container stops, then print its exit code   # 截取容器停止时的退出状态值</span></span>
<span class="line"><span style="color:#abb2bf;"></span></span></code></pre></div>`,73),l=[o];function t(r,i,c,d,m,h){return n(),s("div",null,l)}const g=a(e,[["render",t]]);export{b as __pageData,g as default};
