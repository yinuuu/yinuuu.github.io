import{_ as o}from"./chunks/ArticleMetadata.2facd5d6.js";import{_ as t,c as l,b as h,w as c,d as n,e as p,a as j,r as u,o as d,f,g as _}from"./app.2918728e.js";const V=JSON.parse('{"title":"学习大纲","description":"","frontmatter":{"title":"学习大纲","author":"yinuuu","date":"2023/01/01","categories":["Nodejs"],"tags":["Nodejs"]},"headers":[{"level":2,"title":"前端需要了解的nodejs","slug":"前端需要了解的nodejs","link":"#前端需要了解的nodejs","children":[{"level":3,"title":"nodejs介绍","slug":"nodejs介绍","link":"#nodejs介绍","children":[]}]},{"level":2,"title":"nodejs在KSF框架中的应用","slug":"nodejs在ksf框架中的应用","link":"#nodejs在ksf框架中的应用","children":[]}],"relativePath":"web/forward/01-Nodejs/07-nodejs大纲.md","lastUpdated":1677165673000}'),m={name:"web/forward/01-Nodejs/07-nodejs大纲.md"},k=n("h1",{id:"nodejs大纲",tabindex:"-1"},[p("nodejs大纲 "),n("a",{class:"header-anchor",href:"#nodejs大纲","aria-hidden":"true"},"#")],-1),v=j('<h2 id="前端需要了解的nodejs" tabindex="-1">前端需要了解的nodejs <a class="header-anchor" href="#前端需要了解的nodejs" aria-hidden="true">#</a></h2><h3 id="nodejs介绍" tabindex="-1">nodejs介绍 <a class="header-anchor" href="#nodejs介绍" aria-hidden="true">#</a></h3><ul><li><p>nodejs和JavaScript有什么区别</p><ul><li>JavaScript是一门程序语言，nodejs是JavaScript的运行时（运行环境）</li><li>chrome、firefox等都可以看做成是一种js的浏览器运行环境，而nodejs是一种js的服务器运行环境</li></ul></li><li><p>nodejs基本特点</p><ul><li><p>解释器（js引擎）：safari的JavaScriptCore，chrome的v8都是js引擎，nodejs使用的就是v8引擎</p></li><li><p>浏览器是一个沙箱环境，运行在浏览器的js没有运行在服务端的js那么自由，很多事情都没法做比如文件系统操作，特定的网络读写操作，连接数据库等等，而且在浏览器端的事件大都是用户触发的事件。</p></li><li><p>内置程序库（运行时内核）：全局对象process进程，fs库文件，net库网络， path库等</p></li><li><p>libuv：事件循环，事件队列，异步IO</p></li><li><p>npm是nodejs的包管理工具，由npm管理的包目前已经达到130万多个，npm大大简化了nodejs程序的编写工作，几乎任何一个简单的功能，在实现前都可以去npm上找找，很可能就已经有无数前辈实现过，并且功能完善测试完备，只需npm install一下，nodejs用的怎么样，就看你熟练使用那些库了</p><p>备注：npm上也有多很奇怪的库，比如is-odd，判断是一个是不是偶数，它的有效代码差不多不超过十行，这个库的下载量每周五十万次，有人说你们js圈真厉害，验证个奇偶数都装个npm包。侧面说明npm上有意思的东西有很多无论大小</p></li></ul></li><li><p>缺点</p><ul><li>生态比不上java，性能比不上c++，快速建站比不上php，便捷的工具库比不上Python</li><li>node单线程对于cpu计算密集的操作不擅长</li></ul></li><li><p>优点</p><ul><li>nodejs语法完全是js语法，只要你懂js基础就可以学会nodejs后端开发</li><li>开发周期短、开发成本低、学习成本低</li></ul></li></ul><h4 id="为什么要学习nodejs" tabindex="-1">为什么要学习nodejs <a class="header-anchor" href="#为什么要学习nodejs" aria-hidden="true">#</a></h4><ul><li>nodejs的出现可以说是使得前端开发去了解后台有了更为快捷的路径</li></ul><ul><li>用node搭建web服务器，和前端框架实现一个前后数据交互，这样的话我们不需要别人来写后台接口，自己一个人就可以把整个项目做出来</li></ul><h4 id="nodejs常用框架" tabindex="-1">nodejs常用框架 <a class="header-anchor" href="#nodejs常用框架" aria-hidden="true">#</a></h4><ul><li>Koa：以洋葱模型的开发模式</li><li>Express：以路由为核心的服务端nodejs框架</li></ul><h4 id="总结" tabindex="-1">总结 <a class="header-anchor" href="#总结" aria-hidden="true">#</a></h4><p>​ 以前端的角度大概说了下nodejs的基础，每一个点都能单独的拿出来说很多，这里只是让大家对node有个大概的了解，方便后续的学习</p><h2 id="nodejs在ksf框架中的应用" tabindex="-1">nodejs在KSF框架中的应用 <a class="header-anchor" href="#nodejs在ksf框架中的应用" aria-hidden="true">#</a></h2><h4 id="ksf-http-server开发" tabindex="-1">ksf http server开发 <a class="header-anchor" href="#ksf-http-server开发" aria-hidden="true">#</a></h4><h4 id="ksf-rpc-server开发" tabindex="-1">ksf rpc server开发 <a class="header-anchor" href="#ksf-rpc-server开发" aria-hidden="true">#</a></h4><h4 id="ksf-client-rpc调用" tabindex="-1">ksf client rpc调用 <a class="header-anchor" href="#ksf-client-rpc调用" aria-hidden="true">#</a></h4><h4 id="ksfnodejs核心模块" tabindex="-1">ksfnodejs核心模块 <a class="header-anchor" href="#ksfnodejs核心模块" aria-hidden="true">#</a></h4>',15);function b(e,x,N,S,g,w){const r=o,i=u("ClientOnly");return d(),l("div",null,[k,h(i,null,{default:c(()=>{var a,s;return[(((a=e.$frontmatter)==null?void 0:a.aside)??!0)&&(((s=e.$frontmatter)==null?void 0:s.showArticleMetadata)??!0)?(d(),f(r,{key:0,article:e.$frontmatter},null,8,["article"])):_("",!0)]}),_:1}),v])}const $=t(m,[["render",b]]);export{V as __pageData,$ as default};
