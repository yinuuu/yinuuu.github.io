import{_ as t,c as d,o as r,a as e}from"./app.2918728e.js";const I=JSON.parse('{"title":"MySQL数据类型","description":"","frontmatter":{"title":"MySQL数据类型","author":"yinuuu","date":"2023/01/01","categories":["MySQL"],"tags":["MySQL"]},"headers":[{"level":2,"title":"字符串数据类型","slug":"字符串数据类型","link":"#字符串数据类型","children":[]},{"level":2,"title":"数值数据类型","slug":"数值数据类型","link":"#数值数据类型","children":[]},{"level":2,"title":"日期和时间数据类型","slug":"日期和时间数据类型","link":"#日期和时间数据类型","children":[]},{"level":2,"title":"二进制数据类型","slug":"二进制数据类型","link":"#二进制数据类型","children":[]}],"relativePath":"linux/db/01-MySQL/01-数据类型.md","lastUpdated":1677165673000}'),a={name:"linux/db/01-MySQL/01-数据类型.md"},h=e('<h2 id="字符串数据类型" tabindex="-1">字符串数据类型 <a class="header-anchor" href="#字符串数据类型" aria-hidden="true">#</a></h2><table><thead><tr><th>数据类型</th><th>说明</th></tr></thead><tbody><tr><td>CHAR</td><td>1～255 个字符的定长串。它的长度必须在创建时指定，否则 MySQL 假定为 CHAR(1)</td></tr><tr><td>ENUM</td><td>接受最多 64 K 个串组成的一个预定义集合的某个串</td></tr><tr><td>LONGTEXT</td><td>与 TEXT 相同，但最大长度为 4GB</td></tr><tr><td>MEDIUMTEXT</td><td>与 TEXT 相同，但最大长度为 16K</td></tr><tr><td>SET</td><td>接受最多 64 个串组成的一个预定义集合的零个或多个串</td></tr><tr><td>TEXT</td><td>最大长度为 64K 的变长文本</td></tr><tr><td>TINYTEXT</td><td>与 TEXT 相同，但最大长度为 255 字节</td></tr><tr><td>VARCHAR</td><td>长度可变，最多不超过 255 字节。如果在创建时指定为 VARCHAR(n)，则可存储 0 到 n 个字符的变长串（其中 n≤255）</td></tr></tbody></table><h2 id="数值数据类型" tabindex="-1">数值数据类型 <a class="header-anchor" href="#数值数据类型" aria-hidden="true">#</a></h2><table><thead><tr><th>数据类型</th><th>说明</th></tr></thead><tbody><tr><td>BIT</td><td>位字段，1～64 位。（在 MySQL 5 之前，BIT 在功能上等价于 TINYINT</td></tr><tr><td>BIGINT</td><td>整数值，支持9223372036854775808～9223372036854775807（如果是 UNSIGNED，为 0～18446744073709551615）的数</td></tr><tr><td>BOOLEAN（或 BOOL）</td><td>布尔标志，或者为 0 或者为 1，主要用于开/关（on/off）标志</td></tr><tr><td>DECIMAL（或 DEC）</td><td>精度可变的浮点值</td></tr><tr><td>DOUBLE</td><td>双精度浮点值</td></tr><tr><td>FLOAT</td><td>单精度浮点值</td></tr><tr><td>INT（或 INTEGER）</td><td>整数值，支持2147483648～2147483647（如果是 UNSIGNED，为 0～4294967295）的数</td></tr><tr><td>MEDIUMINT</td><td>整数值，支持8388608～8388607（如果是 UNSIGNED，为 0～16777215）的数</td></tr><tr><td>REAL</td><td>4 字节的浮点值</td></tr><tr><td>SMALLINT</td><td>整数值，支持32768～32767（如果是 UNSIGNED，为 0～65535）的数</td></tr><tr><td>TINYINT</td><td>整数值，支持128～127（如果为 UNSIGNED，为 0～255）的数</td></tr></tbody></table><h2 id="日期和时间数据类型" tabindex="-1">日期和时间数据类型 <a class="header-anchor" href="#日期和时间数据类型" aria-hidden="true">#</a></h2><table><thead><tr><th>数据类型</th><th>说明</th></tr></thead><tbody><tr><td>DATE</td><td>表示 1000-01-01～9999-12-31 的日期，格式为 YYYY-MM-DD</td></tr><tr><td>DATETIME</td><td>DATE 和 TIME 的组合</td></tr><tr><td>TIMESTAMP</td><td>功能和 DATETIME 相同（但范围较小）</td></tr><tr><td>TIME</td><td>格式为 HH:MM:SS</td></tr><tr><td>YEAR</td><td>用 2 位数字表示，范围是 70（1970 年）～69（2069 年），用 4 位数字表示，范围是 1901 年～2155 年</td></tr></tbody></table><h2 id="二进制数据类型" tabindex="-1">二进制数据类型 <a class="header-anchor" href="#二进制数据类型" aria-hidden="true">#</a></h2><table><thead><tr><th>数据类型</th><th>说明</th></tr></thead><tbody><tr><td>BLOB</td><td>Blob 最大长度为 64KB</td></tr><tr><td>MEDIUMBLOB</td><td>Blob 最大长度为 16MB</td></tr><tr><td>LONGBLOB</td><td>Blob 最大长度为 4GB</td></tr><tr><td>TINYBLOB</td><td>Blob 最大长度为 255 字节</td></tr></tbody></table>',8),l=[h];function i(n,T,o,s,E,_){return r(),d("div",null,l)}const M=t(a,[["render",i]]);export{I as __pageData,M as default};
