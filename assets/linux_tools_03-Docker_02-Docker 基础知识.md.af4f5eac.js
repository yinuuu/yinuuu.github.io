import{_ as e,c as r,o as a,a as i}from"./app.2918728e.js";const _=JSON.parse('{"title":"Docker基础知识","description":"","frontmatter":{"title":"Docker基础知识","author":"yinuuu","date":"2023/01/01","categories":["Docker"],"tags":["Docker"]},"headers":[{"level":2,"title":"1 什么是Docker","slug":"_1-什么是docker","link":"#_1-什么是docker","children":[]},{"level":2,"title":"2 为什么 Docker 如此流行?","slug":"_2-为什么-docker-如此流行","link":"#_2-为什么-docker-如此流行","children":[]},{"level":2,"title":"3 Docker 的理念","slug":"_3-docker-的理念","link":"#_3-docker-的理念","children":[]},{"level":2,"title":"4 Docker 虚拟化","slug":"_4-docker-虚拟化","link":"#_4-docker-虚拟化","children":[]},{"level":2,"title":"5 Docker的优势","slug":"_5-docker的优势","link":"#_5-docker的优势","children":[]}],"relativePath":"linux/tools/03-Docker/02-Docker 基础知识.md","lastUpdated":1677165673000}'),o={name:"linux/tools/03-Docker/02-Docker 基础知识.md"},t=i('<h2 id="_1-什么是docker" tabindex="-1">1 什么是Docker <a class="header-anchor" href="#_1-什么是docker" aria-hidden="true">#</a></h2><p><strong>Docker</strong>是一个<a href="https://zh.wikipedia.org/wiki/%E9%96%8B%E6%94%BE%E5%8E%9F%E5%A7%8B%E7%A2%BC" target="_blank" rel="noreferrer">开放源代码</a>软件项目，让应用程序部署在<a href="https://zh.wikipedia.org/wiki/%E4%BD%9C%E6%A5%AD%E7%B3%BB%E7%B5%B1%E5%B1%A4%E8%99%9B%E6%93%AC%E5%8C%96" target="_blank" rel="noreferrer">软件货柜</a>下的工作可以自动化进行，借此在<a href="https://zh.wikipedia.org/wiki/Linux" target="_blank" rel="noreferrer">Linux</a>操作系统上，提供一个额外的软件<a href="https://zh.wikipedia.org/wiki/%E6%8A%BD%E8%B1%A1%E5%B1%A4" target="_blank" rel="noreferrer">抽象层</a>，以及<a href="https://zh.wikipedia.org/wiki/%E4%BD%9C%E6%A5%AD%E7%B3%BB%E7%B5%B1%E5%B1%A4%E8%99%9B%E6%93%AC%E5%8C%96" target="_blank" rel="noreferrer">操作系统层虚拟化</a>的自动管理机制</p><p>依据行业分析公司“451研究”：“Dockers是有能力打包应用程序及其虚拟容器，可以在任何Linux服务器上运行的依赖性工具，这有助于实现灵活性和便携性，应用程序在任何地方都可以运行，无论是公有云、私有云、单机等。”</p><p><strong>简单来说,Docker 通过对应用组件的封装、分发、部署、运行等生命周期的管理，使用户的APP（可以是一个WEB应用或数据库应用等等）及其运行环境能够做到“一次封装，到处运行”。</strong></p><h2 id="_2-为什么-docker-如此流行" tabindex="-1">2 为什么 Docker 如此流行? <a class="header-anchor" href="#_2-为什么-docker-如此流行" aria-hidden="true">#</a></h2><p>一款产品从开发到上线，从操作系统，到运行环境，再到应用配置。作为开发+运维之间的协作我们需要关心很多东西，这也是很多互联网公司都不得不面对的问题，特别是各种版本的迭代之后，不同版本环境的兼容，对运维人员都是考验。Docker之所以发展如此迅速，也是因为它对此给出了一个标准化的解决方案。</p><p>环境配置如此麻烦，换一台机器，就要重来一次，费力费时。很多人想到，能不能从根本上解决问题，软件可以带环境安装？也就是说，安装的时候，把原始环境一模一样地复制过来。开发人员利用 Docker 可以消除协作编码时“在我的机器上可正常工作”的问题。</p><p><img src="https://gitee.com/krislin_zhao/IMGcloud/raw/master/img/20200525135454.png#crop=0&amp;crop=0&amp;crop=1&amp;crop=1&amp;id=WNk84&amp;originHeight=350&amp;originWidth=707&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;status=done&amp;style=none&amp;title=" alt=""></p><p>之前在服务器配置一个应用的运行环境，要安装各种软件，随便拿一个 Java 项目来说，Java/Tomcat/MySQL/JDBC驱动包基本是必不可少的。安装和配置这些东西有多麻烦就不说了，它还不能跨平台。假如我们是在 Windows 上安装的这些环境，到了 Linux 又得重新装。况且就算不跨操作系统，换另一台同样操作系统的服务器，要移植应用也是非常麻烦的。</p><p>传统上认为，软件编码开发/测试结束后，所产出的成果即是程序或是能够编译执行的二进制字节码等(java为例)。而为了让这些程序可以顺利执行，开发团队也得准备完整的部署文件，让维运团队得以部署应用程式，开发需要清楚的告诉运维部署团队，用的全部配置文件+所有软件环境。不过，即便如此，仍然常常发生部署失败的状况。</p><p><strong>Docker镜像的设计，使得Docker得以打破过去「程序即应用」的观念。透过镜像(images)将作业系统核心除外，运作应用程式所需要的系统环境，由下而上打包，达到应用程式跨平台间的无缝接轨运作。</strong></p><h2 id="_3-docker-的理念" tabindex="-1">3 Docker 的理念 <a class="header-anchor" href="#_3-docker-的理念" aria-hidden="true">#</a></h2><p>Docker是基于Go语言实现的云开源项目。</p><p>Docker的主要目标是“Build，Ship and Run Any App,Anywhere”，也就是通过对应用组件的封装、分发、部署、运行等生命周期的管理，使用户的APP（可以是一个WEB应用或数据库应用等等）及其运行环境能够做到“一次封装，到处运行”。</p><p><img src="https://gitee.com/krislin_zhao/IMGcloud/raw/master/img/20200525135659.png#crop=0&amp;crop=0&amp;crop=1&amp;crop=1&amp;id=iKHLj&amp;originHeight=293&amp;originWidth=645&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;status=done&amp;style=none&amp;title=" alt=""></p><p>Linux 容器技术的出现就解决了这样一个问题，而 Docker 就是在它的基础上发展过来的。将应用运行在 Docker 容器上面，而 Docker 容器在任何操作系统上都是一致的，这就实现了<code>跨平台、跨服务器</code>。只需要一次配置好环境，换到别的机子上就可以一键部署好，大大简化了操作(可以参考一下 Java 的一次编译,处处运行特性)</p><blockquote><p>简单来说,Docker 的出现解决了运行环境和配置问题软件容器，方便做持续集成并有助于整体发布的容器虚拟化技术</p></blockquote><h2 id="_4-docker-虚拟化" tabindex="-1">4 Docker 虚拟化 <a class="header-anchor" href="#_4-docker-虚拟化" aria-hidden="true">#</a></h2><ul><li>虚拟机技术 虚拟机（virtual machine）就是带环境安装的一种解决方案。 它可以在一种操作系统里面运行另一种操作系统，比如在Windows 系统里面运行Linux 系统。应用程序对此毫无感知，因为虚拟机看上去跟真实系统一模一样，而对于底层系统来说，虚拟机就是一个普通文件，不需要了就删掉，对其他部分毫无影响。这类虚拟机完美的运行了另一套系统，能够使应用程序，操作系统和硬件三者之间的逻辑不变。 <img src="https://gitee.com/krislin_zhao/IMGcloud/raw/master/img/20200525140019.png#crop=0&amp;crop=0&amp;crop=1&amp;crop=1&amp;id=iSYFB&amp;originHeight=473&amp;originWidth=342&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;status=done&amp;style=none&amp;title=" alt=""> 虚拟机的缺点： <ol><li>资源占用多</li><li>冗余步骤多</li><li>启动慢</li></ol></li><li>容器虚拟化技术 由于前面虚拟机存在这些缺点，Linux 发展出了另一种虚拟化技术：Linux 容器（Linux Containers，缩写为 LXC）。 Linux 容器不是模拟一个完整的操作系统，而是对进程进行隔离。有了容器，就可以将软件运行所需的所有资源打包到一个隔离的容器中。容器与虚拟机不同，不需要捆绑一整套操作系统，只需要软件工作所需的库资源和设置。系统因此而变得高效轻量并保证部署在任何环境中的软件都能始终如一地运行。 <img src="https://gitee.com/krislin_zhao/IMGcloud/raw/master/img/20200525140222.png#crop=0&amp;crop=0&amp;crop=1&amp;crop=1&amp;id=rxTJs&amp;originHeight=474&amp;originWidth=340&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;status=done&amp;style=none&amp;title=" alt=""></li></ul><p>比较 Docker 和传统虚拟化方式的不同之处：</p><ul><li>传统虚拟机技术是虚拟出一套硬件后，在其上运行一个完整操作系统，在该系统上再运行所需应用进程；</li><li>而容器内的应用进程直接运行于宿主的内核，容器内没有自己的内核，而且也没有进行硬件虚拟。因此容器要比传统虚拟机更为轻便。</li><li>每个容器之间互相隔离，每个容器有自己的文件系统 ，容器之间进程不会相互影响，能区分计算资源。</li></ul><h2 id="_5-docker的优势" tabindex="-1">5 Docker的优势 <a class="header-anchor" href="#_5-docker的优势" aria-hidden="true">#</a></h2><ol><li>更快速的应用交付和部署 传统的应用开发完成后，需要提供一堆安装程序和配置说明文档，安装部署后需根据配置文档进行繁杂的配置才能正常运行。Docker化之后只需要交付少量容器镜像文件，在正式生产环境加载镜像并运行即可，应用安装配置在镜像里已经内置好，大大节省部署配置和测试验证时间。</li><li>更便捷的升级和扩缩容 随着微服务架构和Docker的发展，大量的应用会通过微服务方式架构，应用的开发构建将变成搭乐高积木一样，每个Docker容器将变成一块“积木”，应用的升级将变得非常容易。当现有的容器不足以支撑业务处理时，可通过镜像运行新的容器进行快速扩容，使应用系统的扩容从原先的天级变成分钟级甚至秒级。</li><li>更简单的系统运维 应用容器化运行后，生产环境运行的应用可与开发、测试环境的应用高度一致，容器会将应用程序相关的环境和状态完全封装起来，不会因为底层基础架构和操作系统的不一致性给应用带来影响，产生新的BUG。当出现程序异常时，也可以通过测试环境的相同容器进行快速定位和修复。</li><li>更高效的计算资源利用 Docker是内核级虚拟化，其不像传统的虚拟化技术一样需要额外的Hypervisor支持，所以在一台物理机上可以运行很多个容器实例，可大大提升物理服务器的CPU和内存的利用率。</li></ol>',23),p=[t];function l(c,n,s,d,k,h){return a(),r("div",null,p)}const g=e(o,[["render",l]]);export{_ as __pageData,g as default};
